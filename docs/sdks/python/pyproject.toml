[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "apilens-python"
dynamic = ["version"]
description = "Official Python client library for API Lens - AI API cost tracking and analytics"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "API Lens Team", email = "support@apilens.dev"},
]
maintainers = [
    {name = "API Lens Team", email = "support@apilens.dev"},
]
keywords = [
    "ai", "openai", "anthropic", "google", "api", "cost", "tracking",
    "analytics", "monitoring", "llm", "gpt", "claude", "gemini",
    "machine-learning", "artificial-intelligence", "usage-tracking"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Monitoring",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = [
    "httpx>=0.24.0",
    "pydantic>=2.0.0",
    "python-dateutil>=2.8.0",
    "typing-extensions>=4.0.0",
]

[project.urls]
Homepage = "https://apilens.dev"
Documentation = "https://docs.apilens.dev/python"
Repository = "https://github.com/apilens/python-sdk"
"Bug Tracker" = "https://github.com/apilens/python-sdk/issues"
Changelog = "https://github.com/apilens/python-sdk/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]
examples = [
    "jupyter>=1.0.0",
    "matplotlib>=3.5.0",
    "pandas>=1.5.0",
    "plotly>=5.0.0",
    "streamlit>=1.20.0",
    "flask>=2.0.0",
    "django>=4.0.0",
]

[project.scripts]
apilens = "apilens.cli:main"

[tool.setuptools.dynamic]
version = {attr = "apilens.__version__"}

[tool.setuptools.packages.find]
include = ["apilens*"]

[tool.setuptools.package-data]
apilens = ["py.typed"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "httpx.*",
    "pydantic.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--cov=apilens",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "network: marks tests as requiring network access",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["apilens"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Flake8 configuration (in setup.cfg or .flake8 since it doesn't support pyproject.toml)
# [flake8]
# max-line-length = 100
# extend-ignore = E203, E266, E501, W503
# max-complexity = 10
# select = B,C,E,F,W,T4,B9